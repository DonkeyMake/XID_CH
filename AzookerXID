pragma solidity 0.8.7;
import "./AzookerUAI.sol";

abstract contract AzookerXID is AzookerUAI {
uint IDs = 0;

mapping(uint => string) ID_AI;

 modifier IDIndexed(uint ID){ require(ID < IDs, "ID Out of Index"); _;}
  function IDLastIndex() public view returns(uint){return IDs;}

   function XSetID(string memory AI) internal returns(uint){//Set the ID
    ID_AI[IDs] = AI;
   ++IDs;  return (IDs - 1); }
         
      function XOwnerID(uint ID) internal view IDIndexed(ID) returns(string memory){ //ID = [AI => Address] 
       return ID_AI[ID]; }


 mapping(uint => string) ID_XID;

   function XIDSet(uint ID, string memory XID) internal  {//Set the ID Info
      ID_XID[ID] = XID; }//AI->ID |ID -> XID

      function XOwnerXID(uint ID) public view IDIndexed(ID) returns(string memory){
         return ID_XID[ID]; }

}
